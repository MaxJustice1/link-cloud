trigger:
  branches:
    include:
    - master
  paths:
    exclude:
      - README.md
      - azure-pipelines.yml
      - Azure_Pipelines/*
pr: none

pool:
  vmImage: 'ubuntu-latest'

#####################
parameters:
- name: buildAll
  displayName: Force Build All?
  type: boolean
  default: false

variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  tags: |
    latest
    $(Build.BuildId)
  # Naming
  Account-Name: 'link-account'
  API-Name: 'link-api'
  Audit-Name: 'link-audit'
  #Census-Name: 'link-census'
  DataAcquisition-Name: 'link-dataacquisition'
  MeasureEval-Name: 'link-measureeval'
  Normalization-Name: 'link-normalization'
  Notification-Name: 'link-notification'
  PatientList-Name: 'link-patientlist'
  PatientQuery-Name: 'link-patientquery'
  QueryDispatch-Name: 'link-query'
  Report-Name: 'link-report'
  Submission-Name: 'link-submission'
  Tenant-Name: 'link-tenant'
  Validation-Name: 'link-validation'
  
  

stages:
- stage: Build
  jobs:
  - job: getChangedFiles
    displayName: Get Changes
    steps: 
      - checkout: self
        fetchDepth: 0
      - task: PowerShell@2
        name: setVariables
        inputs:
          targetType: 'inline'
          script: |
            #Get any changed files
            $changedFiles = git diff --name-status HEAD HEAD^
            
            # Account - Return $true if path has changed files
            $accountBool = ((Select-String -InputObject $changedFiles -Pattern "Account/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=accountChanged;isOutput=true;]$accountBool"

            # API - Return $true if path has changed files
            $apiBool = ((Select-String -InputObject $changedFiles -Pattern "Api/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=apiChanged;isOutput=true;]$apiBool"

            # Audit - Return $true if path has changed files
            $auditBool = ((Select-String -InputObject $changedFiles -Pattern "Audit/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=auditChanged;isOutput=true;]$auditBool"

            # Census - Return $true if path has changed files
            $censusBool = ((Select-String -InputObject $changedFiles -Pattern "Census/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=censusChanged;isOutput=true;]$censusBool"

            # DataAcquisition - Return $true if path has changed files
            $dataBool = ((Select-String -InputObject $changedFiles -Pattern "DataAcquisition/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=dataChanged;isOutput=true;]$dataBool"

            # MeasureEval - Return $true if path has changed files
            $measureBool = ((Select-String -InputObject $changedFiles -Pattern "MeasureEval/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=measureChanged;isOutput=true;]$measureBool"

            # Normalization - Return $true if path has changed files
            $normBool = ((Select-String -InputObject $changedFiles -Pattern "Normalization/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=normChanged;isOutput=true;]$normBool"

            # Notification - Return $true if path has changed files
            $notificationBool = ((Select-String -InputObject $changedFiles -Pattern "Notification/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=notificationChanged;isOutput=true;]$notificationBool"

            # PatientList - Return $true if path has changed files
            $patientBool = ((Select-String -InputObject $changedFiles -Pattern "PatientList/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=patientChanged;isOutput=true;]$patientBool"

            # PatientQuery - Return $true if path has changed files
            $patientqueryBool = ((Select-String -InputObject $changedFiles -Pattern "PatientsToQuery/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=patientqueryChanged;isOutput=true;]$patientqueryBool"

            # QueryDispatch - Return $true if path has changed files
            $queryBool = ((Select-String -InputObject $changedFiles -Pattern "QueryDispatch/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=queryChanged;isOutput=true;]$queryBool"

            # Report - Return $true if path has changed files
            $reportBool = ((Select-String -InputObject $changedFiles -Pattern "Report/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=reportChanged;isOutput=true;]$reportBool"

            # Submission - Return $true if path has changed files
            $submissionBool = ((Select-String -InputObject $changedFiles -Pattern "Submission/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=submissionChanged;isOutput=true;]$submissionBool"

            # Tenant - Return $true if path has changed files
            $tenantBool = ((Select-String -InputObject $changedFiles -Pattern "Tenant/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=tenantChanged;isOutput=true;]$tenantBool"

            # Validation - Return $true if path has changed files
            $validationBool = ((Select-String -InputObject $changedFiles -Pattern "Validation/" -AllMatches).Matches.Count -gt 0)
            Write-Host "##vso[task.setvariable variable=validationChanged;isOutput=true;]$validationBool"

            Write-Host "##vso[task.setvariable variable=task.A.status]Success"
  ###
  # Account
  - job: Account
    displayName: "Build Account"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.accountChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps:
    - task: Docker@2
      displayName: "Build & Push Account"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Account-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Account/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Account"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment account-deploy account=nhsnlink.azurecr.io/$(Account-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # API
  - job: API
    displayName: "Build API"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.apiChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps:
    - task: Docker@2
      displayName: "Build & Push API"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(API-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Api/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy API"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment api-deploy api=nhsnlink.azurecr.io/$(API-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # Audit
  - job: Audit
    displayName: "Build Audit"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.auditChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps:
    - task: Docker@2
      displayName: "Build & Push Audit"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Audit-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Audit/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Audit"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment audit-deploy audit=nhsnlink.azurecr.io/$(Audit-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # Census
  #- job: Census
  #  displayName: "Build Census"
  #  dependsOn: getChangedFiles
  #  variables: 
  #    changed: $[ dependencies.getChangedFiles.outputs['setVariables.censusChanged'] ]
  #  condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
  #  steps:
  #  - task: Docker@2
  #    displayName: "Build & Push Census"
  #    condition: always()
  #    inputs:
  #      containerRegistry: 'Link ACR'
  #      repository: $(Census-Name)
  #      command: 'buildAndPush'
  #      Dockerfile: '**/Census/Dockerfile'
  #      tags: '$(tags)'
  #      buildContext: '$(Build.Repository.LocalPath)'
  #  - task: Kubernetes@1
  #    displayName: "Deploy Census"
  #    inputs:
  #      connectionType: 'Kubernetes Service Connection'
  #      kubernetesServiceEndpoint: 'Link BOTW'
  #      namespace: 'dev-scale'
  #      command: 'set'
  #      arguments: 'image -n dev-scale deployment census-deploy census=nhsnlink.azurecr.io/$(Census-Name):$(Build.BuildId)'
  #      secretType: 'dockerRegistry'
  #      containerRegistryType: 'Azure Container Registry'

  ###
  # DataAcquisition
  - job: DataAcquisition
    displayName: "Build Census"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.dataChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Data Acquisition"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(DataAcquisition-Name)
        command: 'buildAndPush'
        Dockerfile: '**/DataAcquisition/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy DataAcquisition"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment data-deploy data=nhsnlink.azurecr.io/$(DataAcquisition-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # MeasureEval
  - job: MeasureEval
    displayName: "Build MeasureEval"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.measureChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Measure Eval"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(MeasureEval-Name)
        command: 'buildAndPush'
        Dockerfile: '**/MeasureEval/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy MeasureEval"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment measure-deploy measure=nhsnlink.azurecr.io/$(MeasureEval-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # Normalization
  - job: Normalization
    displayName: "Build Normalization"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.normChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Normalization"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Normalization-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Normalization/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Normalization"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment norm-deploy normalization=nhsnlink.azurecr.io/$(Normalization-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # Notification
  - job: Notification
    displayName: "Build Notification"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.notificationChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Notification"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Notification-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Notification/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Notification"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment notification-deploy notification=nhsnlink.azurecr.io/$(Notification-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  # ###
  # # PatientList
  # - job: Patient
  #   displayName: "Build PatientList"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.patientChanged'] ]
  #   condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
  #   steps: 
  #   - task: Docker@2
  #     displayName: "Build & Push Patient List"
  #     condition: always()
  #     inputs:
  #       containerRegistry: 'Link ACR'
  #       repository: $(PatientList-Name)
  #       command: 'buildAndPush'
  #       Dockerfile: '**/PatientList/Dockerfile'
  #       tags: '$(tags)'
  #       buildContext: '$(Build.Repository.LocalPath)'
  #   - task: Kubernetes@1
  #     displayName: "Deploy Patient List"
  #     inputs:
  #       connectionType: 'Kubernetes Service Connection'
  #       kubernetesServiceEndpoint: 'Link BOTW'
  #       namespace: 'dev-scale'
  #       command: 'set'
  #       arguments: 'image -n dev-scale deployment patient-deploy patient=nhsnlink.azurecr.io/$(PatientList-Name):$(Build.BuildId)'
  #       secretType: 'dockerRegistry'
  #       containerRegistryType: 'Azure Container Registry'
  ###
  # PatientQuery
  - job: PatientQuery
    displayName: "Build PatientQuery"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.patientqueryChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push PatientQuery"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(PatientQuery-Name)
        command: 'buildAndPush'
        Dockerfile: '**/PatientsToQuery/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy PatientQuery"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment patientquery-deploy patientquery=nhsnlink.azurecr.io/$(PatientQuery-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # QueryDispatch
  - job: QueryDispatch
    displayName: "Build QueryDispatch"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.queryChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push QueryDispatch"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(QueryDispatch-Name)
        command: 'buildAndPush'
        Dockerfile: '**/QueryDispatch/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy QueryDispatch"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment query-deploy query=nhsnlink.azurecr.io/$(QueryDispatch-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  ###
  # Report
  - job: Report
    displayName: "Build Report"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.reportChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Report"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Report-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Report/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Report"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment report-deploy report=nhsnlink.azurecr.io/$(Report-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

  ###
  # Submission
  - job: Submission
    displayName: "Build Submission"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.submissionChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Submission"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Submission-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Submission/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Submission"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment submission-deploy submission=nhsnlink.azurecr.io/$(Submission-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'

  ###
  # Tenant
  - job: Tenant
    displayName: "Build Tenant"
    dependsOn: getChangedFiles
    variables: 
      changed: $[ dependencies.getChangedFiles.outputs['setVariables.tenantChanged'] ]
    condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
    steps: 
    - task: Docker@2
      displayName: "Build & Push Tenant"
      condition: always()
      inputs:
        containerRegistry: 'Link ACR'
        repository: $(Tenant-Name)
        command: 'buildAndPush'
        Dockerfile: '**/Tenant/Dockerfile'
        tags: '$(tags)'
        buildContext: '$(Build.Repository.LocalPath)'
    - task: Kubernetes@1
      displayName: "Deploy Tenant"
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Link BOTW'
        namespace: 'dev-scale'
        command: 'set'
        arguments: 'image -n dev-scale deployment tenant-deploy tenant=nhsnlink.azurecr.io/$(Tenant-Name):$(Build.BuildId)'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
  # ###
  # # Validation
  # - job: Validation
  #   displayName: "Build Validation"
  #   dependsOn: getChangedFiles
  #   variables: 
  #     changed: $[ dependencies.getChangedFiles.outputs['setVariables.validationChanged'] ]
  #   condition: or(eq(variables.changed, 'True'), eq('${{parameters.buildAll}}', 'True'))
  #   steps: 
  #   - task: Docker@2
  #     displayName: "Build & Push Validation"
  #     condition: always()
  #     inputs:
  #       containerRegistry: 'Link ACR'
  #       repository: $(Validation-Name)
  #       command: 'buildAndPush'
  #       Dockerfile: '**/Validation/Dockerfile'
  #       tags: '$(tags)'
  #       buildContext: '$(Build.Repository.LocalPath)'
  #   - task: Kubernetes@1
  #     displayName: "Deploy Validation"
  #     inputs:
  #       connectionType: 'Kubernetes Service Connection'
  #       kubernetesServiceEndpoint: 'Link BOTW'
  #       namespace: 'dev-scale'
  #       command: 'set'
  #       arguments: 'image -n dev-scale deployment validation-deploy validation=nhsnlink.azurecr.io/$(Validation-Name):$(Build.BuildId)'
  #       secretType: 'dockerRegistry'
  #       containerRegistryType: 'Azure Container Registry'
