trigger:
  branches:
    include:
    - master
  paths:
    include:
    - MeasureEval/*
pr: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Link_BOTW_Build_Package_Variables
- name: project
  value: 'MeasureEval/MeasureEval.csproj'
- name: testProject
  value: 'MeasureEvalUnitTests/MeasureEvalUnitTests.csproj'
- name: nugetPath
  value: 'MeasureEval/nuget.config'
- name: tags1
  value: 'latest'
- name: tags2
  value: '$(Build.BuildId)'
- name: registry-repo-Name
  value: 'link-measureeval'
- name: dockerPath
  value: '**/MeasureEval/Dockerfile'
steps:
  - task: PowerShell@2
    displayName: 'Transform nuget.config'
    inputs:
      targetType: 'inline'
      script: |
        $path = '$(System.DefaultWorkingDirectory)/MeasureEval/nuget.config'
        $nugetUrl = '$(nuget)'
        $sharedUrl = '$(Shared_BOTW_Feed)'
        $token = '$(ClearTextPassword)'
        $basePath = '$(System.DefaultWorkingDirectory)'
        
        $xml = [xml](Get-Content -Path $path)
        
        $node = $xml.configuration.packageSources.add |
                where { $_.key -eq 'nuget' }
        $node.value = $nugetUrl
        
        Write-Host "updated nuget url:"
        Write-Host $node.value
        
        $node = $xml.configuration.packageSources.add |
                where { $_.key -eq 'Shared_BOTW_Feed' }
        $node.value = $sharedUrl
        
        Write-Host "Shared botw url:"
        Write-Host $node.value
        
        $node = $xml.configuration.packageSourceCredentials.Shared_BOTW_Feed.add |
                where { $_.key -eq 'ClearTextPassword' }
        $node.value = $token
        
        Write-Host "updated token:"
        Write-Host $node.value
        
        $xml.Save($path)

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '$(project)'
      nugetConfigPath: '$(nugetPath)'
      feedsToUse: config
  
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: '$(project)'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: $(testProject)'
    displayName: 'Run Tests'
  

  - task: Docker@2
    displayName: "Build & Push MeasureEval Docker Image"
    condition: always()
    inputs:
      containerRegistry: 'Link ACR'
      repository: $(registry-repo-name)
      command: 'buildAndPush'
      Dockerfile: $(dockerPath)
      tags: |
        $(tags1)
        $(tags2)
      buildContext: '$(Build.Repository.LocalPath)'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'manifest'
